{"version":3,"sources":["partials/Button.jsx","partials/Header.jsx","partials/TaskList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["MyButton","styled","Button","margin","ActionButton","_ref","color","label","onClick","react_default","a","createElement","variant","useStyles","makeStyles","header","margin-bottom","margin-top","Header","classes","Typography","className","gutterBottom","TaskList","taskList","Fragment","partials_Header","List","aria-label","map","task","ListItemText","key","pre","concat","Date","getTime","styles","mainContainer","background","grey","border-radius","padding","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getLocalStorageTasks","JSON","parse","localStorage","getItem","handleAddTask","_this$state","state","inputValue","push","setState","setItem","stringify","handleRemoveAllTasks","removeItem","handleInputChange","ev","target","value","Container","props","maxWidth","TextField","fullWidth","id","onChange","partials_Button","length","partials_TaskList","React","Component","withStyles","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6dd1187.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/styles';\n\nconst MyButton = styled(Button)({\n  margin: '15px',\n});\n\nfunction ActionButton({ color, label, onClick }) {\n  return (\n    <MyButton\n      color={color}\n      onClick={onClick}\n      variant=\"contained\"\n    >\n      {label}\n    </MyButton>\n  )\n};\n\nActionButton.propTypes = {\n  color: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ActionButton;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport PropTypes from 'prop-types';\n\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  header: {\n    'margin-bottom': '20px',\n    'margin-top': '20px',\n  },\n});\n\nfunction Header({ label, variant }) {\n  const classes = useStyles();\n  return (\n    <Typography\n      className={classes.header}\n      color=\"primary\"\n      gutterBottom\n      variant={variant}\n    >\n      {label}\n    </Typography>\n  );\n}\n\nHeader.propTypes = {\n  label: PropTypes.string.isRequired,\n  variant: PropTypes.string.isRequired,\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Header from './Header';\n\nimport List from '@material-ui/core/List';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nfunction TaskList({ taskList }) {\n  const generateKey = (pre) => `${pre}-${new Date().getTime()}`;\n\n  const renderTaskList = () => {\n    return taskList.map(task => (\n      <ListItemText key={generateKey(task)}>{task}</ListItemText>\n    ));\n  }\n\n  return (\n    <React.Fragment>\n      <Header\n        label=\"Current tasks\"\n        variant=\"h4\"\n      />\n\n      <List aria-label=\"List of current tasks\">\n        {renderTaskList()}\n      </List>\n    </React.Fragment>\n  )\n};\n\nTaskList.propTypes = {\n  taskList: PropTypes.array.isRequired,\n};\n\nexport default TaskList;\n","import React from 'react';\n\nimport ActionButton from './partials/Button';\nimport Header from './partials/Header';\nimport TaskList from './partials/TaskList';\n\nimport Container from '@material-ui/core/Container';\nimport grey from '@material-ui/core/colors/grey';\nimport TextField from '@material-ui/core/TextField';\n\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = {\n  mainContainer: {\n    background: grey[200],\n    'border-radius': '15px',\n    'margin-top': '10%',\n    padding: '20px',\n  },\n};\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      inputValue: '',\n      taskList: this.getLocalStorageTasks(),\n    };\n  }\n\n  getLocalStorageTasks = () => JSON.parse(localStorage.getItem('taskList')) || []\n\n  handleAddTask = () => {\n    const { inputValue, taskList } = this.state;\n    if (inputValue !== '') {\n      taskList.push(inputValue);\n      this.setState({\n        inputValue: '',\n        taskList,\n      });\n      localStorage.setItem('taskList', JSON.stringify(taskList));\n    }\n  }\n\n  handleRemoveAllTasks = () => {\n    this.setState({\n      inputValue: '',\n      taskList: [],\n    });\n    localStorage.removeItem('taskList');\n  }\n\n  handleInputChange = (ev) => {\n    this.setState({\n      inputValue: ev.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <Container\n        className={this.props.classes.mainContainer}\n        maxWidth=\"sm\"\n      >\n        <Header\n          label=\"Add a new task\"\n          variant=\"h3\"\n        />\n\n        <TextField\n          fullWidth\n          id=\"new-task-input\"\n          label=\"Type some text..\"\n          onChange={this.handleInputChange}\n          value={this.state.inputValue}\n        />\n\n        <ActionButton\n          color=\"primary\"\n          label=\"Add new task\"\n          onClick={this.handleAddTask}\n        />\n\n        <ActionButton\n          color=\"secondary\"\n          label=\"Clear the task list\"\n          onClick={this.handleRemoveAllTasks}\n        />\n\n        {this.state.taskList.length > 0 && (\n          <TaskList\n            taskList={this.state.taskList}\n          />\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}