{"version":3,"sources":["partials/Button.jsx","partials/Header.jsx","partials/TaskList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["MyButton","styled","Button","margin","ActionButton","color","label","onClick","variant","useStyles","makeStyles","header","Header","classes","Typography","className","gutterBottom","taskWrapper","display","TaskList","handleDelete","taskList","List","aria-label","map","task","ListItemText","IconButton","styles","mainContainer","background","grey","padding","withStyles","props","React","useState","inputValue","setInput","setTaskLisk","Container","maxWidth","TextField","fullWidth","id","onChange","ev","target","value","length","removeIdx","indexOf","Error","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wMAMMA,EAAWC,YAAOC,IAAPD,CAAe,CAC9BE,OAAQ,SAmBKC,EAhBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,QAAjB,OACnB,cAACP,EAAD,CACEK,MAAOA,EACPE,QAASA,EACTC,QAAQ,YAHV,SAKGF,K,gBCVCG,EAAYC,YAAW,CAC3BC,OAAQ,CACN,gBAAiB,OACjB,aAAc,UAuBHC,EAnBA,SAAC,GAAwB,IAAtBN,EAAqB,EAArBA,MAAOE,EAAc,EAAdA,QACjBK,EAAUJ,IAChB,OACE,cAACK,EAAA,EAAD,CACEC,UAAWF,EAAQF,OACnBN,MAAM,UACNW,cAAY,EACZR,QAASA,EAJX,SAMGF,K,4CCXDG,EAAYC,YAAW,CAC3BO,YAAa,CACXC,QAAS,UAmCEC,EA/BE,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC1BR,EAAUJ,IAWhB,OACE,qCACE,cAAC,EAAD,CACEH,MAAM,gBACNE,QAAQ,OAGV,cAACc,EAAA,EAAD,CAAMC,aAAW,wBAAjB,SAhByBF,EAASG,KAAI,SAAAC,GAAI,OAC5C,sBAAKV,UAAWF,EAAQI,YAAxB,UACE,cAACS,EAAA,EAAD,UAAeD,IACf,cAACE,EAAA,EAAD,CAAYJ,aAAW,SAASlB,MAAM,UAAUE,QAAS,kBAAMa,EAAaK,IAA5E,SACE,cAAC,IAAD,QAHsCA,Y,2CCTxCG,EAAS,CACbC,cAAe,CACbC,WAAYC,IAAK,KACjB,gBAAiB,OACjB,aAAc,MACdC,QAAS,SAuEEC,cAAWL,EAAXK,EAnEO,SAACC,GAAW,IAAD,EACAC,IAAMC,SAAS,IADf,mBACxBC,EADwB,KACZC,EADY,OAECH,IAAMC,SAAS,IAFhB,mBAExBf,EAFwB,KAEdkB,EAFc,KA8B/B,OACE,eAACC,EAAA,EAAD,CACEzB,UAAWmB,EAAMrB,QAAQgB,cACzBY,SAAS,KAFX,UAIE,cAAC,EAAD,CACEnC,MAAM,iBACNE,QAAQ,OAGV,cAACkC,EAAA,EAAD,CACEC,WAAS,EACTC,GAAG,iBACHtC,MAAM,mBACNuC,SA5BoB,SAACC,GACzBR,EAASQ,EAAGC,OAAOC,QA4BfA,MAAOX,IAGT,cAAC,EAAD,CACEhC,MAAM,UACNC,MAAM,eACNC,QA/CU,WACV8B,IACFC,EAAS,IACTC,EAAY,GAAD,mBAAKlB,GAAL,CAAegB,SA+C1B,cAAC,EAAD,CACEhC,MAAM,YACNC,MAAM,sBACNC,QA9CiB,WACrB+B,EAAS,IACTC,EAAY,OA+CTlB,EAAS4B,OAAS,GACjB,cAAC,EAAD,CAAU7B,aAzCK,SAACK,GACpB,IAAMyB,EAAY7B,EAAS8B,QAAQ1B,GACnC,GAAIyB,EAAY,EACd,MAAM,IAAIE,MAAM,8BAEhB/B,EAASgC,OAAOH,EAAW,GAC3BX,EAAY,YAAIlB,KAmCwBA,SAAUA,UCtEpCiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.52505df3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/styles';\n\nconst MyButton = styled(Button)({\n  margin: '15px',\n});\n\nconst ActionButton = ({ color, label, onClick }) => (\n  <MyButton\n    color={color}\n    onClick={onClick}\n    variant=\"contained\"\n  >\n    {label}\n  </MyButton>\n);\n\nActionButton.propTypes = {\n  color: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ActionButton;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport PropTypes from 'prop-types';\n\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  header: {\n    'margin-bottom': '20px',\n    'margin-top': '20px',\n  },\n});\n\nconst Header = ({ label, variant }) => {\n  const classes = useStyles();\n  return (\n    <Typography\n      className={classes.header}\n      color=\"primary\"\n      gutterBottom\n      variant={variant}\n    >\n      {label}\n    </Typography>\n  );\n}\n\nHeader.propTypes = {\n  label: PropTypes.string.isRequired,\n  variant: PropTypes.string.isRequired,\n}\n\nexport default Header;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport PropTypes from 'prop-types';\n\nimport Header from './Header';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst useStyles = makeStyles({\n  taskWrapper: {\n    display: 'flex',\n  },\n});\n\nconst TaskList = ({ handleDelete, taskList }) => {\n  const classes = useStyles();\n\n  const renderTaskList = () => taskList.map(task => (\n    <div className={classes.taskWrapper} key={task}>\n      <ListItemText>{task}</ListItemText>\n      <IconButton aria-label=\"delete\" color=\"primary\" onClick={() => handleDelete(task)}>\n        <DeleteIcon />\n      </IconButton>\n    </div>\n  ));\n\n  return (\n    <>\n      <Header\n        label=\"Current tasks\"\n        variant=\"h4\"\n      />\n\n      <List aria-label=\"List of current tasks\">\n        {renderTaskList()}\n      </List>\n    </>\n  )\n};\n\nTaskList.propTypes = {\n  handleDelete: PropTypes.func.isRequired,\n  taskList: PropTypes.array.isRequired,\n};\n\nexport default TaskList;\n","import React from 'react';\n\nimport ActionButton from './partials/Button';\nimport Header from './partials/Header';\nimport TaskList from './partials/TaskList';\n\nimport Container from '@material-ui/core/Container';\nimport grey from '@material-ui/core/colors/grey';\nimport TextField from '@material-ui/core/TextField';\n\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = {\n  mainContainer: {\n    background: grey[200],\n    'border-radius': '15px',\n    'margin-top': '10%',\n    padding: '20px',\n  },\n};\n\nconst App: React.FC = (props) => {\n  const [inputValue, setInput] = React.useState('');\n  const [taskList, setTaskLisk] = React.useState([]);\n\n  const addTask = () => {\n    if (inputValue) {\n      setInput('');\n      setTaskLisk([...taskList, inputValue]);\n    }\n  }\n\n  const removeAllTasks = () => {\n    setInput('');\n    setTaskLisk([]);\n  }\n\n  const handleInputChange = (ev) => {\n    setInput(ev.target.value)\n  }\n\n  const handleDelete = (task) => {\n    const removeIdx = taskList.indexOf(task);\n    if (removeIdx < 0) {\n      throw new Error('Error in deletion process!');\n    } else {\n      taskList.splice(removeIdx, 1);\n      setTaskLisk([...taskList]);\n    }\n  }\n\n  return (\n    <Container\n      className={props.classes.mainContainer}\n      maxWidth=\"sm\"\n    >\n      <Header\n        label=\"Add a new task\"\n        variant=\"h3\"\n      />\n\n      <TextField\n        fullWidth\n        id=\"new-task-input\"\n        label=\"Type some text..\"\n        onChange={handleInputChange}\n        value={inputValue}\n      />\n\n      <ActionButton\n        color=\"primary\"\n        label=\"Add new task\"\n        onClick={addTask}\n      />\n\n      <ActionButton\n        color=\"secondary\"\n        label=\"Clear the task list\"\n        onClick={removeAllTasks}\n      />\n\n      {taskList.length > 0 && (\n        <TaskList handleDelete={handleDelete} taskList={taskList} />\n      )}\n    </Container>\n  );\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}